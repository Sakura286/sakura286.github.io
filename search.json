[{"title":"搭建 apt 仓库","url":"/2024-04-04/65ec9d8196b8/","content":"目标手里有几个包，想搭建一个 apt 仓库，对应发行版为 Debian unstable riscv64\n思路这里的 server 指的是提供 apt 仓库服务的机器，client 指的是要访问 apt 仓库的机器\n\n(server) 为本机生成 GPG 公钥与私钥\n(server) 使用 aptly 添加包，并生成仓库的 snapshot\n(server) 使用 nginx 搭建私有的服务器，存放生成的 snapshot\n(client) 添加公钥，修改 apt 配置\n\n步骤1. 生成 gpg-key生成签名用的 GPG KEY运行命令：gpg --full-gen-key，按照提示操作。\n~/.gnupg/openpgp-revocs.d/目录下生成.rev的 key 文件\n生成 ASCII 格式的公钥gpg --output &lt;key_filename&gt; --export &lt;your_email&gt;\n请确保&lt;your_email&gt;与生成私钥时所用的邮箱相同\n2. 使用 aptly 添加包，并生成仓库的 snapshot安装 aptly 后，创建仓库，本步骤执行后将生成~/.aptly目录\n# 请拓展尖括号的内容, 例如，我这边拓展后是这样的# aptly repo create -architectures riscv64 -comment &#x27;private riscv64 repo&#x27; -component main -distribution unstable my_repoaptly repo create -architectures &lt;arch&gt; -comment &lt;your_comment&gt; -component &lt;component&gt; -distribution &lt;distrubution&gt; &lt;repo_name&gt;\n\n向仓库内添加若干包，本步骤执行后将在~/.aptly/pool目录下存放所添加包的拷贝\naptly repo add &lt;repo_name&gt; &lt;pkg_path&gt;\n\n创建仓库 snapshot 并发布，此过程会要求使用 GPG 私钥签名，所以会提示输入生成 GPG 私钥时的密码\n发布后的仓库在~/.aptly/pool\naptly snapshot create &lt;snapshot_name&gt; from repo &lt;repo_name&gt;aptly publish -architectures &lt;arch&gt; snapshot &lt;snapshot_name&gt;\n\n3. 搭建服务器使用 nginx 搭建文件服务器，使得外部网络可以访问仓库内容\nsudo apt-get install nginx -y# 修改 root /var/www/html; 为目标目录# 并在添加下面一行# autoindex on;sudo vim /etc/nginx/sites-enabled/defaultsudo systemctl restart nginx.service# 别忘了用浏览器访问一下# http://&lt;ip_address&gt;/public\n\n4. 在 client 端访问 apt 仓库注意，服务器我们已经搭建好了，接下来的操作在客户端上进行\n将前文中的公钥添加至本机配置，TODO：使用 DEB-822 格式，添加\nsudo apt-key add &lt;key_filename&gt;\n\n在 apt 配置中写入如下一行\n# 例如，我这边的是 deb http://10.9.127.200/public/ unstable maindeb &lt;server_path&gt; &lt;distrubution&gt; &lt;component&gt;\n\n已知问题TODO\n\n需要对 aptly 进行进一步的解释\n需要对 gpg 签名的原理进行进一步的解释\n\n参考资料\naptly 搭建本地仓库 - vimer\n动手搭建一个私有的 apt 服务器 - csdn\n手动自建 APT 仓库步骤 - 趣小组\n生成新 GPG 密钥 - GitHub\n\n","tags":["repology","debian"]},{"title":"十万个为什么","url":"/2025-06-13/a9cedd872168/","content":"1. ssh 到远程机器上，打开 tmux，如果此时网络断开，为什么终端会把鼠标滚轮解释错误？现象1：上滚轮会64;133;44M，下滚轮会输出65;133;44M，进一步观察到，第一个数字只和鼠标滚轮方向有关，向上是64，向下是65，而后面两个数字，则和鼠标所在位置有一定的关系，第2个数字，是光标在 x 轴上的位置，第3个数字，是光标在y轴上的位置。再进一步观察，第一个数字和鼠标操作有关，鼠标左键是0，鼠标右键是2，鼠标中键是1，鼠标拖动是32，前进后退键无反应。\n现象2：使用 reset 命令后不再解释错误\n回答：结合最后的M，可以判断，这应该是终端所捕获的鼠标命令，第一个数字代表鼠标操作类型，第二个数字是鼠标横轴位置，第二个数字是鼠标纵轴位置，可是这\n现象2：使用 reset 命令后不再解释错误。\n回答：reset 重置了虚拟终端的状态，使其不再相应鼠标事件。可以通过这样一个简单的操作[^1][^2]来启用鼠标追踪，复现上面的问题：\necho -e &quot;\\e[?1000;1006;1015h&quot;\n\n2. 复制 tmux 的内容时，有时会产生[^1] How to configure the terminal so that a mouse click will move the cursor to the current mouse position - StackExchange[^2] how to get MouseMove and MouseClick in bash?\n参考资料\n\nman read(1) https://man7.org/linux/man-pages/man1/read.1p.html\nman reset(1) https://linux.die.net/man/1/reset\nXTERM Console Codes https://tintin.mudhalla.net/info/xterm/\nhow to get MouseMove and MouseClick in bash? https://stackoverflow.com/questions/5966903\nWhat are the button codes for mouse scroll wheel left&#x2F;right, in DECSET SGR 1006? https://stackoverflow.com/questions/51578176\nHow to configure the terminal so that a mouse click will move the cursor to the current mouse position https://unix.stackexchange.com/questions/35021\nComplex mouse inputs in XTerm https://unix.stackexchange.com/questions/518479\nVT220 https://en.wikipedia.org/wiki/VT220\nXTerm Control Sequences https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking\nXTerm Control Sequences https://invisible-island.net/xterm/ctlseqs/ctlseqs.pdf\n\n\n\n"},{"title":"Hello-World","url":"/2022-07-30/44f2583c960a/","content":"就像是装系统一样，建站的事情来来回回也很多次了，不过只是为了体验建站本身如垦荒一样的过程，以及满足自己对未来的博客文章能够硕果累累的想象。但也同装系统一样，逐渐发觉如果只是这样做，如果只是在重复无法进行积累的事情，那么是无法对自己的过去赋予意义的。活着是为了什么呢？\n我暂且把站点的名字取为“你无法体验苹果本身”，只是因为自己对哲学，尤其是对休谟的一些粗浅的兴趣爱好。我们能感受到苹果的颜色、气味、口感，却无法直接感到苹果本身。那么，我们能感受到“我”吗？我们能感受到的，只有自己正在进行的心理活动——快乐，悲伤，愤怒，抑或无聊，我们无法感到一个没有心理活动的自己。思考这种无聊的问题在以前满足了我的虚荣心，到现在……也不能说没有，但我想我应该逐渐发现这件事本身其实已经足够有趣了。所以我把我认为的这里面最有趣的一个问题设为站点的名字。\n关于我的 ID ，“ 286 ”已经是很久远的事情了，源自我当时翻得快要背过的小学计算机课本里提到的 80286，我当时认为它很慢（虽然确实很慢），就把这个引申为“小傻瓜”的意思（成年人了要在黑历史前稳住）。“ Sakura ”就已经比较近了，是在大一时读到的《龙族III》里路明非在牛郎店工作时的花名，当时还没有接触日语，错误地把这个读成了带俄语味的/səˈku:la/（并觉得很酷！），直到毕业后有数个朋友跟我说“很难想象一个叫樱花的男人”后，发现这个ID已经到处使用没法再改了才追悔莫及，啊，万恶的历史包袱，万恶的兼容。\n基本的介绍就到这里吧，希望这个博客能像自己这几年装系统一样，能活得久一点。\n","tags":["record"]},{"title":"认识 ELF（一）","url":"/2024-05-05/8193263efb8b/","content":"本文的目的是通过计算一个 ELF 文件各部分的大小来认识 ELF 文件的组成。\n基础知识\nELF 文件的主要部分，\n\n从链接器的视角来看由section组成，每个section的信息记录在 ELF 文件尾部的section header table部分\n从加载器的视角（即执行视角）来看由segment组成，每个segment的信息记录在 ELF 文件头部的program header table部分\n\nELF 文件大小计算int main()&#123;    return 0;&#125;\n\n使用gcc -o test test.c编译上面的 c 文件，并用ls -l查看文件的大小（在作者的电脑上是 15832 字节）\n使用readelf -h test可得知 ELF header 的相关信息\nELF Header:  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00   Class:                             ELF64  Data:                              2&#x27;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              DYN (Position-Independent Executable file)  Machine:                           Advanced Micro Devices X86-64  Version:                           0x1  Entry point address:               0x1040  Start of program headers:          64 (bytes into file)  Start of section headers:          13912 (bytes into file)  Flags:                             0x0  Size of this header:               64 (bytes)  Size of program headers:           56 (bytes)  Number of program headers:         13  Size of section headers:           64 (bytes)  Number of section headers:         30  Section header string table index: 29\n\n本文只关注大小，由Size of this header可以得知ELF header的大小是 64 字节\nprogram header table 应该紧随 ELF header 之后，那么其相对于 ELF 文件起始处的偏移应该也是 64 字节，Start of program headers一项可以验证此结论\nprogram header table 里存放了多条 program header，每条 program header 都存放着每个segment的元数据。在本例中，由Size of program headers与Number of program headers可知 program header table 一共有 13 条，每一条的大小是 56 字节。即整个表的大小为 13 * 56 &#x3D; 728 字节。\nsections部分，或segments部分，应当紧随 program header table 之后，所以推测其起始偏移应该是 64 + 728 &#x3D; 792 字节处\n使用readelf -S -W test命令，获得如下内容：\nSection Headers:  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0  [ 1] .interp           PROGBITS        0000000000000318 000318 00001c 00   A  0   0  1  [ 2] .note.gnu.property NOTE           0000000000000338 000338 000020 00   A  0   0  8  [ 3] .note.gnu.build-id NOTE           0000000000000358 000358 000024 00   A  0   0  4  [ 4] .note.ABI-tag     NOTE            000000000000037c 00037c 000020 00   A  0   0  4  [ 5] .gnu.hash         GNU_HASH        00000000000003a0 0003a0 000024 00   A  6   0  8  [ 6] .dynsym           DYNSYM          00000000000003c8 0003c8 000090 18   A  7   1  8  [ 7] .dynstr           STRTAB          0000000000000458 000458 000088 00   A  0   0  1  [ 8] .gnu.version      VERSYM          00000000000004e0 0004e0 00000c 02   A  6   0  2  [ 9] .gnu.version_r    VERNEED         00000000000004f0 0004f0 000030 00   A  7   1  8  [10] .rela.dyn         RELA            0000000000000520 000520 0000c0 18   A  6   0  8  [11] .init             PROGBITS        0000000000001000 001000 000017 00  AX  0   0  4  [12] .plt              PROGBITS        0000000000001020 001020 000010 10  AX  0   0 16  [13] .plt.got          PROGBITS        0000000000001030 001030 000008 08  AX  0   0  8  [14] .text             PROGBITS        0000000000001040 001040 0000f4 00  AX  0   0 16  [15] .fini             PROGBITS        0000000000001134 001134 000009 00  AX  0   0  4  [16] .rodata           PROGBITS        0000000000002000 002000 000004 04  AM  0   0  4  [17] .eh_frame_hdr     PROGBITS        0000000000002004 002004 00002c 00   A  0   0  4  [18] .eh_frame         PROGBITS        0000000000002030 002030 0000ac 00   A  0   0  8  [19] .init_array       INIT_ARRAY      0000000000003e00 002e00 000008 08  WA  0   0  8  [20] .fini_array       FINI_ARRAY      0000000000003e08 002e08 000008 08  WA  0   0  8  [21] .dynamic          DYNAMIC         0000000000003e10 002e10 0001b0 10  WA  7   0  8  [22] .got              PROGBITS        0000000000003fc0 002fc0 000028 08  WA  0   0  8  [23] .got.plt          PROGBITS        0000000000003fe8 002fe8 000018 08  WA  0   0  8  [24] .data             PROGBITS        0000000000004000 003000 000010 00  WA  0   0  8  [25] .bss              NOBITS          0000000000004010 003010 000008 00  WA  0   0  1  [26] .comment          PROGBITS        0000000000000000 003010 00001f 01  MS  0   0  1  [27] .symtab           SYMTAB          0000000000000000 003030 000348 18     28  18  8  [28] .strtab           STRTAB          0000000000000000 003378 0001c9 00      0   0  1  [29] .shstrtab         STRTAB          0000000000000000 003541 000110 00      0   0  1\n\n重点看 Off(set) 与 Size 两列。offset 是该 section 相对于整个 ELF 文件起始的偏移，第一个有实质内容的 section 是.interp，其起始偏移为 0x318，正好对应前文的 792 字节。\n随后，看最后的 section .shstrtab，其起始偏移为 0x3541，大小为 0x110，即所有 sections 的结束偏移为 0x3541 + 0x110 &#x3D; 0x3651，即 13905 字节。\nsection header table 应当紧随 sections 之后，即其起始偏移为 13905 字节。由Number of section headers与Size of section headers可知，表中有 30 条 section header，每条的大小是 64 字节，所以表的大小是 30 * 64 &#x3D; 1920 字节。那么整个文件的大小为 13905 + 1920 &#x3D; 15825 字节。\n我们验证一下\n$ du -b test15832   test\n\n咦，实际的大小是 15832 字节。问题在于 ELF 文件的每一部分都是 8 字节对齐的（TODO：在哪定的？），所以，虽然 sections 的结束偏移为 13905 字节，但 section header table 应当对齐 8 字节，即应当从 13912 偏移处开始，从 ELF header 中的Start of section headers可以验证此结论。\n\nelf 文件格式 -1- 可执行文件 - 黄导 - 知乎\n\n","tags":["linux"]},{"title":"dpkg-source 到底做了什么？","url":"/2025-01-17/5c4d034fb128/","content":"此文尚未完成，如果想看此内容麻烦到我的仓库催我更新。\n","tags":["repology","debian","linux"]},{"title":"Debian 打包脚本预处理","url":"/2025-09-17/9f72b4ef6e03/","content":"有时候我们想要更灵活地处理 Debian 的打包脚本，使得我们可以通过参数来影响 control&#x2F;install 之类的文件，那么应该怎么办呢？\n1. install 的处理可以在 install 文件里留一个占位符，然后在 rules 文件里用sed进行替换\n*.install:\nopt/@FOO_VERSION@/bin\n\nrules:\nfoo_version=&quot;6.4.3&quot;override_dh_install:        sed -i &quot;s,@FOO_VERSION@,$&#123;foo_version&#125;,g&quot; debian/*.install        dh_install\n\n将文件从 debian&#x2F;tmp 安装到 debian&#x2F;${pkg_name}，是发生在 dh_install 阶段的。所以只要在 dh_install 之前完成替换即可。\n2. control 的处理TODO\n","tags":["repology","debian","linux"]},{"title":"ROCm Debian 支持现状","url":"/2025-07-31/55f7973fbcf3/","content":"本调查于 2025 年 7 月 31 日\n今天在 RISC-V 平台上基于 ROCm 6.4.2 后端，把 Deepseek 70B Q4 跑通了，而且很流畅，有点小高兴。\n可行性验证了，是时候考虑上游化的事情了。\n想从下面几个方面着手调查\n\nDebian ROCm 的版本\nDebian ROCm 组的活跃情况\nDebian ROCm 对其他架构的支持情况\n\n基础信息ROCm Team 介绍 https://wiki.debian.org/Teams/ROCm源码仓库 https://salsa.debian.org/rocm-team邮件列表 https://lists.debian.org/debian-ai/\n1. 版本以 llama.cpp 所依赖的最高层级的包 hipblas 开始捋，根据Packages overview for Debian ROCm Team\nhipblas     5.5.1rocsolver   5.5.1rocblas     5.5.1 (experimental: 6.4.1)rocsparse   5.7,1 (experimental: 6.4.1)rocprim     5.7.1 (experimental: 6.4.1)roctracer   5.7.1 (experimental: 6.4.1)\nsmi-lib     5.7.1 (experimental: 6.4.1)rocm-hipamd 5.7.1 (experimental: 6.1.5)rocminfo    6.1.2 (experimental: 6.4.1)rocm-llvm   n&#x2F;a   (experimental: 6.1.2)\n附：上游的5.5.1 在 2023.05 发布5.7.1 在 2023.10 发布6.1.2 在 2024.07 发布6.4.1 在 2025.05 发布\n可以看出，除了工具链&#x2F;HIP库略老（6.1.2）之外，重要的数学库已经在 experimental 里更新到了最新的 6.4.1\n或许可以看看 rocm-llvm 与 rocm-hipamd 的更新情况，以及一些不关键的包的升级情况\n2. ROCm 社区活跃情况目前有两位活跃的维护者Cordell Bloor与Christian Kastner\n最近（三个月内）有其他的代码贡献者，例如Kentaro Hayashi，Andrew Lee (李健秋) ，Christian Bayle，Jérémy Lal‘。邮件列表里活跃的还有 M. Zhou，\n最近两个月，Cordell Bloor 开始搞双周会，但是最近因为他休假，所以跳过了一次。目前双周会的链接并未公开，需要给 Bloor 发邮件去要，地址cgmb@slerp.xyz\n3. 对其他架构的支持AMD 上游并未提到对特定 CPU 架构的需求，只需该 CPU 支持 PCIe atomic 即可\nDebian 这边支持 amd64 arm64 ppc64el\n2024.12，Cordell Bloor 看到 POWER 系统支持 ROCm，打算搞 arm64 和 ppc64\n2025.02，Raptor Computing 给 Debian ROCm 组提供了一台 ppc64 机器，但是驱动有bug；有人建议用树莓派5来做 arm64 的验证\n2025.04，\n2025.05\n2025.06\n2025.07\n结论"},{"title":"LibreOffice 对自定义图形的处理","url":"/2024-12-20/231f6c89be0f/","content":"此文尚未完成，如果想看此内容麻烦到我的仓库催我更新。\n事情的起因是修一个bug[^2]，需要折腾一下自定义图形，但几乎没有见到相关中文资料，英文资料也比较晦涩，所以想开个帖子讲得浅显易懂一点\n结构1：自定义图形总括\n所谓自定义图形（Custom Shape），就是打开 LibreOffice writer&#x2F;impress，选择Insert-&gt;Shape后出现的那些矢量图形。矢量图是由点和线构成的，其中“线”是一种点与点之间的关系。考虑一个三角形\n结构2：基本语法\n结构3：LibreOffice 语法\n结构4：实例\n[^2]: ceui https://bugs.documentfoundation.org/show_bug.cgi?id=148631\n","tags":["LibreOffice","UI","development"]},{"title":"\\[译\\] 在日本，有关摩托车的基础知识","url":"/2025-01-19/5b7fdd641b26/","content":"\n本文译自バイクについての基礎知識 - Tossnet ，已归档\n\n（一）分类摩托车作为车辆而言，在《道路交通法》根据道路交通的情况进行了分类，在《道路运送车辆法》中根据车辆技术标准进行了定义。此外，《道路交通法》对摩托车的驾照也进行了区分。\n在《道路交通法》中的分类根据《道路交通法》，摩托车的分类如下：50cc以下为“原动机付自行车”（原付），50cc以上至400cc为“普通自动二轮车”（普通二轮），400cc以上为“大型自动二轮车”（大型二轮）。因此，根据该法，50cc以上的摩托车属于“自动车”。此外，驾照种类也是依此来划分的。[^1]\n在《道路运送车辆法》中的分类根据《道路运送车辆法》，排量在125cc以下的摩托车方为“自动车”。其中，排量在50cc以下的称为“第一类原动机付自行车”，排量超过50cc但不超过125cc的摩托车称为“第二类原动机付自行车”。此外，排量超过125cc但不超过250cc的摩托车被归类为“轻型二轮自动车”（轻二轮），排量超过250cc的则被归类为“小型二轮自动车”（小型二轮），两者都属于自动车。[^2]\n\n（二）注册登记根据《道路运送车辆法》，自动车必须通过“注册”（原文：登録）手续后才能使用，然而摩托车不在“注册”之列，其手续如下：\n\n小型二轮车（250cc以上排量）需要在运输局进行新车检查后，方能获得指定的车辆编号。虽然这一手续与汽车的“注册”不同，但在实际操作中通常被视为“登录”。\n\n轻型二轮车（125cc至250cc排量）需要向运输局“申报”，并获得车辆编号的指定。\n\n原付（125cc以下排量）对于一二类原付，无需向运输局申报，只需根据地方税法，向市、区、町、村提交地方税纳税申告书，并领取车牌。\n\n\n（三）车检摩托车和四轮车一样，也有“车检”，但需要注意的是，根据排量的不同，有些车辆（如原付等）是不需要车检的。不过，即使无需车检，也并不意味着完全不需要检查和维护，因此日常的保养工作不可忽视。\n\n小型二轮车（250cc以上排量）运输局的检查有效期为2年，如果期满后继续使用，则需要每2年进行一次续检。\n\n轻型二轮车（125cc至250cc排量）根据《道路运送车辆法》的规定，属于“免检轻型自动车”，因此无需接受检查。\n\n原付（125cc以下排量）原付（125cc以下）在《道路运送车辆法》中不属于自动车，因此无需接受检查。\n\n\n\n根据《道路运送车辆法》的安全标准，摩托车的前照灯在发动机工作时必须保持常。此规定于1996年指定，并从1998年4月1日起对国内所有量产车（包括进口车）强制执行。\n\n（四）驾照必须持有驾照（免许），才能在公路上驾驶摩托车。\n摩托车驾照分为“大型二轮”、“普通二轮”和“原付”三种，此外在取得“四轮自动车”驾照时，也可以同时获取某些摩托车驾照。详情见下表。\n※“大型驾照”需要在取得普通驾照或大型特殊驾照后，累计满2年才能申请。\n驾照的考取参加笔试和实操考试并合格后，即可取得驾照。\n取得驾照的年龄16岁后可以考取原付和普通二轮驾照，18岁后可以考取大型二轮驾照。\n大型二轮驾照和普通二轮驾照的取得与培训大型二轮驾照和普通二轮驾照均可通过在指定的驾校培训取得。培训主要分为限定普通二轮小型（可驾驶125cc以下）、无限定普通二轮（可驾驶400cc以下）和大型二轮（无排量限制）三种类型。从较小排量的驾照开始考，培训的总时间较少，更容易获得驾照。\n持有普通驾照的人也可以驾驶原付持有普通驾照或大型驾照的人可以驾驶50cc以下的原付。实际上，日常使用原付的人中，约有30%是通过考取普通驾照来驾驶的。\n二轮驾照与普通自动车驾照的笔试结果互认根据《道路交通法》修订案，普通二轮、大型二轮与普通自动车的笔试结果互认。因此，持有普通二轮或大型二轮驾照的人在考取普通汽车驾照时无需参加笔试，反之亦然。这使得驾照的获取变得更为便捷。\n二轮驾照的取得方法驾照考取相关信息主页（链接源自警视厅）\n（五）有关税种持有摩托车，需要根据车辆分类缴纳以下税款：\n自动车车重税该税仅针对两种摩托车征收：已取得机动车检验证书的受检车辆（即小型二轮车），以及已申报并分配车辆编号的免检车辆（即轻型二轮车）。小型二轮车在每次检查时缴纳，轻型二轮仅在申报时缴纳。大部分收入将拨给国家和地方政府道路基金。\n轻自动车税就摩托车而言，从原付到小型二轮车的所有车型均需缴纳。缴纳时间为每年4月1日，纳税义务人为车辆所有者，税收收入作为地方政府的一般财政收入。\n\n（六）保险在日本，根据《自动车损害赔偿补偿法》[^8]，包括摩托车在内的所有自动车与原付都必须加入“自动车损害赔偿责任保险”（自赔责保险）。对于没有自赔责的情况下驾驶自动车的行为，将处以最高六个月的有期徒刑或最高 50,000 日元的罚款，驾照扣扣 6 分并吊销 30 天。调查显示，约有5%的原付车主没有购买自赔责，已经成为了非常严重的问题。\n自赔责保险费用表\n(本表修订时间：2006年4月1日)\n\n\n\n分类\n排量\n12个月\n24个月\n25个月\n36个月\n\n\n\n小型二轮车\n250cc以上\n1,2630\n2,0150\n2,0770\n-\n\n\n轻二轮车\n125cc~250cc\n9740\n1,4410\n-\n1,8990\n\n\n原付\n125cc以下\n7580\n1,0140\n-\n1,2650\n\n\n对于自赔责保险无法承保的部分，可以由其他保险来承担。可选保险种类繁多，例如人身伤害责任险和财产损失责任险，但保险公司也将几种类型的保险打包出售，称为“自动车综合保险”（PAP，Package Automobile Policy）。PAP 包括如下险种：\n（1）人身伤害责任险当您在人身伤害事故中被追究赔偿责任时，此保险将承担自赔责保险无法承保的金额。\n（2）个人意外伤害险如果驾驶员在个人意外事故[^9]中死亡或受伤，由此类保险赔付。\n（3）未投保机动车意外伤害保险这是当事故发生时，另一方没有保险时，向被保险一方的驾驶员和乘客的死亡、受伤和永久残疾进行赔偿的保险。\n（4）财产损失保险当您在财产损失事故中被要求赔偿时，由此类保险赔付。\n（5）旅客意外伤害保险被保人车辆中的乘客死亡、受伤或永久残疾，由此类保险赔付。\n[^1] 专业术语我尽量只把日文汉字简化。其实把“原付”翻译成“助动车”，“自动车”翻译成“机动车”更容易让人理解。\n[^2] 这里有点绕，在《道路交通法》里，400 以上是大型二轮；但《道路运送车辆法》里，400 以上却成了小型二轮。究其原因是限定词不同，前者的“大型自动二轮车”里的“大型”修饰的是“自动二轮车”，后者的“二轮小型自动车”里的“小型”修饰的是“自动车”，而“自动车”类似于国内的“机动车”，包括了二轮摩托与四轮汽车，再大排量的摩托，比起汽车来也算“小型”的。\n[^8] 类似于中国的“机动车交通事故责任强制保险”（交强险）\n[^9] TODO：这种事故中文中应该有对应的词语，待查\n","tags":["translate","japan","motor"]},{"title":"中日摩托车类型与市场的区别","url":"/2025-01-17/30defce748dc/","content":"此文尚未完成，如果想看此内容麻烦到我的仓库催我更新。\n","tags":["motor","key-polity"]},{"title":"日本禁摩考","url":"/2025-01-17/5450c092b915/","content":"此文尚未完成，如果想看此内容麻烦到我的仓库催我更新。\n","tags":["motor","key-polity"]},{"title":"专业术语对比","url":"/2025-01-19/6671aefae131/","content":"\n\n\n日文\n假名&#x2F;外文\n中文\n备注\n\n\n\n教習所\nきょうしゅうじょ\n学习……的地方；驾校\n\n\n\n原付\nげんつき\n助动车\n\n\n\nデュアルパーパス\nDual Purpose\n多功能摩托车（轻型ADV）\n\n\n\n","tags":["motor","key-polity","Japan"]},{"title":"日本二轮车式微史考","url":"/2025-01-17/5a3da242fcb7/","content":"此文尚未完成，如果想看此内容麻烦到我的仓库催我更新。\n","tags":["motor","key-polity"]},{"title":"关于“禁摩”一词内涵的思考","url":"/2025-01-05/630d5614cfa7/","content":"无论是不是摩托车骑手，但凡经历过城市生活的人，应该都对“禁摩”的概念有着或多或少的认识。但是“禁摩”的含义到底是什么，在讨论中很容易变成“（地方）政府对摩托车的各种限制性行为”，可是这些“限制性行为”到底指什么？如果我们不下更清晰的定义，那么相关的各种讨论都将是空中楼阁。\n目前国内不同地区对摩托车的限制性行为大致有以下几种：\n\n指定区域&#x2F;时间禁止摩托车通行[^1]\n不允许摩托车上高速[^2]\n禁止摩托车注册、登记、上牌\n摩托车 13 年强制报废\n不允许摩托车加油，或对摩托车加油有歧视性政策\n\n其中，“指定区域&#x2F;时间”禁止摩托车通行是最狭义上的“禁摩”，也是最具争议的一项。后面我会通过一系列的文章，对上述中的每一条内容做一些简单的陈述与剖析。\n[^1]: 中国大陆禁摩 - 维基百科[^2]: 全国摩托车上高速省份情况科普（仅供参考）山西省根据后续情况更新 - 爱国的海豹黄师傅 - bilibili\n","tags":["motor","key-polity"]}]